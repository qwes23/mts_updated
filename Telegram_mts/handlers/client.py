import asyncio
from datetime import datetime
from pydoc import describe
import re
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from create_bot import dp, bot

from data_base import sqlite_db

from keyboards import kb_client
from keyboards import kb_adress
from keyboards import kb_reg, kb_list
from keyboards import kb_answer
from keyboards.help_kb import help_type_choose_kb, get_help_answer_kb


async def command_menu(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ Profpoint_mts!', reply_markup=kb_client)

class HelpFSM(StatesGroup):
    get_comment = State()
    get_answer = State()


async def get_help_choose_menu(message: types.Message):
    await message.answer("<b>üÜò–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–æ—â–∏</b>", reply_markup=help_type_choose_kb)


async def get_help_choose(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä</b>")
    await HelpFSM.get_comment.set()
    async with state.proxy() as data:
        data['message_id'] = call.message.message_id
        data['user_id'] = call.from_user.id
        data['help_type'] = call.data.split("_")[1]

async def get_help_comment(message: types.Message, state: FSMContext):
    admin_id = 708697982
    async with state.proxy() as data:
        data['comment'] = message.text
        registration_data = sqlite_db.help(data['user_id'])
        type_help_text = "–ü–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞" if data['help_type'] == "bot" else "–ü–æ–º–æ—â—å –≤ –æ–ø–ª–∞—Ç–µ"
        await bot.send_message(admin_id, f"<b>üîî–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å!</b>\n\n"
                                         f"<b>üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {registration_data[1]} {registration_data[2]}\n"
                                         f"<b>üÜò–¢–∏–ø –ø–æ–º–æ—â–∏: {type_help_text}</b>\n\n"
                                         f"<b>üìÑ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['comment']}</b>", reply_markup=await get_help_answer_kb(data['user_id']))
    await message.answer("<b>–ú—ã —Å–ø–µ—à–∏–º –Ω–∞ –ø–æ–º–æ—â—å! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!</b>")
    await state.finish()

async def answer_help_request(call: types.CallbackQuery, state: FSMContext):
    await HelpFSM.get_answer.set()
    async with state.proxy() as data:
        data['message_text'] = call.message.text
        data['message_id'] = call.message.message_id
        data['request_id'] = call.data.split("_")[1]
    await call.message.edit_text(call.message.text + "\n\n<b>‚úè–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç</b>")

async def get_answer_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(data['request_id'], f"<b>üîî–û—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ –ø–æ–º–æ—â–∏</b>:\n\n"
                                                   f"{message.text}")
        await bot.edit_message_text(f"{data['message_text']}\n\n‚úî–û—Ç–≤–µ—á–µ–Ω–æ", message.from_user.id, data['message_id'])
    await state.finish()

async def oplata(message: types.Message):
    await bot.send_message(message.from_user.id, '''
    –û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫ 15-–º—É —á–∏—Å–ª—É —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤ –æ–∫—Ç—è–±—Ä–µ, –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫ 15-–º—É –Ω–æ—è–±—Ä—è.

15-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –í–∞–º –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–∏—Å—å–º–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü.

–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ç—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:

¬´–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π¬ª –Ω–∞ Qugo - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥ 6% —É–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ,

¬´–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ¬ª –Ω–∞ Solar Staff - –æ–ø–ª–∞—Ç–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –≤—ã—á–µ—Ç–æ–º 7%

–ò–ü –Ω–∞ Solar Staff ‚Äì –Ω–∞–ª–æ–≥ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è –ò–ü
                           
                           ''', reply_markup=kb_client)


async def command_info(message: types.Message):
    await bot.send_message(message.from_user.id, '''
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ Profpoint_—Å–∞–ª–æ–Ω—ã —Å–≤—è–∑–∏! –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –Ω–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /start (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É), /–º–æ–∏_–ø—Ä–æ–≤–µ—Ä–∫–∏ (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –í–∞—à–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏) –∏ —Ç.–¥. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω—ã –≤–Ω–∏–∑—É, –≤ –º–µ–Ω—é. –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –û—Ç–º–µ–Ω–∞ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ–±–Ω—É–ª–∏—Ç—Å—è.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω –∏–ª–∏ –ø–ª–∞–Ω—à–µ—Ç, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–º –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –∞–¥—Ä–µ—Å–∞.
–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –≤–∞–º–∏ –Ω–∞ 48 —á–∞—Å–æ–≤.
–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3—Ö —Ä–∞–∑. –ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤ –∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏—Ö –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏.
–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∑–∞ –≤–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Å –¥–∏–∫—Ç–æ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /–ü–æ–¥–¥–µ—Ä–∂–∫–∞.
                           
–°–ø–∞—Å–∏–±–æ! –ò –∂–µ–ª–∞–µ–º –£–¥–∞—á–∏.
    ''', reply_markup=kb_client)
    await message.reply_document('BQACAgIAAxkBAAMPYzFu5Fn_4xmpxTW3rKZz1HaP4BQAAuYbAAJwy4lJ86nafYyu6mMpBA')
    await message.reply_video('BAACAgIAAxkBAAMIYzFsurjC6SuMPtpctTv16_uCSagAAtYbAAJwy4lJE85GYGBz9hopBA')
    # await message.reply_document('BQACAgIAAxkBAAIGh2MkNgpLF9ARx_JUR_-P4NUgXnW0AALFIAACWvUpScOeJyNT06GOKQQ')


async def location_request(message: types.Message):
    await bot.send_message(message.from_user.id, 'reply')


async def location_give(message: types.Message):
    global reply
    lat = message.location.latitude
    lon = message.location.longitude
    lat1 = lat - 3
    lat2 = lat + 3
    lon1 = lon - 3
    lon2 = lon + 3
    reply = sqlite_db.get_info(lat1, lat2, lon1, lon2)
    for i in reply:
        await bot.send_message(message.from_user.id, f'–°–∞–ª–æ–Ω {i} : –∞–¥—Ä–µ—Å - {reply[i][0]}, –æ–ø–ª–∞—Ç–∞: {reply[i][1]}',
                               reply_markup=kb_adress)


class FSMassignation(StatesGroup):
    number_state = State()


async def take_one(message: types.Message):
    await FSMassignation.number_state.set()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    number = int(message.text)

    result = sqlite_db.sql_add_number(user_id, number)
    if result == '–í—ã —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ 3 –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–≤–µ—Ä–æ–∫. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.':
        await message.reply(result, reply_markup=kb_client)
    else:
        await message.reply(result, reply_markup=kb_client)
        await message.reply('–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è! –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –µ–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É!')
        await message.reply_document('BQACAgIAAxkBAAMPYzFu5Fn_4xmpxTW3rKZz1HaP4BQAAuYbAAJwy4lJ86nafYyu6mMpBA')

    await state.finish()


async def test(message: types.Message):
    global user_id
    user_id = message.from_user.id
    # print(user_id)
    reply1 = sqlite_db.get_mylist(user_id)
    # print(reply1)
    if len(reply1) == 0:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É', reply_markup=kb_client)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ', reply_markup=kb_list)
        for i in reply1:
            await bot.send_message(message.from_user.id,
                                   f'–°–∞–ª–æ–Ω –Ω–æ–º–µ—Ä {i} : –∞–¥—Ä–µ—Å - {reply1[i][0]}, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - {reply1[i][1]}')
        await message.reply_document('BQACAgIAAxkBAAMPYzFu5Fn_4xmpxTW3rKZz1HaP4BQAAuYbAAJwy4lJ86nafYyu6mMpBA')


class FSMremove(StatesGroup):
    number_state = State()


async def remove(message: types.Message):
    await FSMremove.number_state.set()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è:')


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    number = int(message.text)

    result = sqlite_db.sql_remove_number(user_id, number)
    await message.reply(result, reply_markup=kb_client)
    await state.finish()


#####################################################–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø#########################################################

user_id = None


class FSMregistration(StatesGroup):
    name = State()
    surname = State()
    email = State()
    phone = State()


async def command_start(message: types.Message):
    global user_id
    user_id = message.from_user.id
    is_registred = sqlite_db.is_registred(user_id)
    if is_registred != '':
        await bot.send_message(message.from_user.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {is_registred}!', reply_markup=kb_client)
    else:
        await bot.send_message(message.from_user.id, '''
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ Profpoint_—Å–∞–ª–æ–Ω—ã —Å–≤—è–∑–∏! –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –Ω–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /start (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É), /–º–æ–∏_–ø—Ä–æ–≤–µ—Ä–∫–∏ (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –í–∞—à–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏) –∏ —Ç.–¥. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω—ã –≤–Ω–∏–∑—É, –≤ –º–µ–Ω—é. –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –û—Ç–º–µ–Ω–∞ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ–±–Ω—É–ª–∏—Ç—Å—è.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω –∏–ª–∏ –ø–ª–∞–Ω—à–µ—Ç, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–º –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –∞–¥—Ä–µ—Å–∞.
–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –≤–∞–º–∏ –Ω–∞ 48 —á–∞—Å–æ–≤.
–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3—Ö —Ä–∞–∑. –ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤ –∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏—Ö –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏.
–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∑–∞ –≤–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Å –¥–∏–∫—Ç–æ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /–ü–æ–¥–¥–µ—Ä–∂–∫–∞.
                           
–°–ø–∞—Å–∏–±–æ! –ò –∂–µ–ª–∞–µ–º –£–¥–∞—á–∏.

–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ?''', reply_markup=kb_reg)
        await message.reply_video('BAACAgIAAxkBAAMIYzFsurjC6SuMPtpctTv16_uCSagAAtYbAAJwy4lJE85GYGBz9hopBA')


# –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def cm_start(message: types.Message):
    await FSMregistration.name.set()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ò–º—è')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def getting_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.from_user.id
        data['name'] = message.text

    await FSMregistration.next()
    await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é')


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
async def getting_surname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['surname'] = message.text
    await FSMregistration.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email')


# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
async def getting_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['email'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await FSMregistration.next()

async def getting_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        data['telegram_name'] = message.from_user.full_name
    await sqlite_db.sql_add_commend(state)
    await message.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=kb_client)
    await state.finish()


# @dp.message_handler(state="*", commands ='–æ—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('OK')


#####################################################–ó–ê–ü–û–õ–ù–ï–ù–ò–ï_–ê–ù–ö–ï–¢–´#########################################################

class FSMfilling(StatesGroup):
    number = State()
    date = State()
    time_start = State()
    # time_end = State()
    # clients_operator = State()
    rezgim = State()
    number_workers = State()
    number_clients = State()
    name_worker = State()
    # dolzhnost_worker = State()
    describe_worker = State()
    # workers_look = State()
    # bad_worker_FIO = State()
    # sale_office = State()
    # bad_sale_office = State()
    resume = State()
    audio = State()
    photo1 = State()
    photo2 = State()


async def command_fill(message: types.Message):
    await FSMfilling.number.set()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def getting_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['user_id'] = message.from_user.id
        data_check['number'] = int(message.text)
        data_check['date_time'] = datetime.now()

    await FSMfilling.next()
    await message.reply('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 12.12.2022')
    await asyncio.sleep(600)
    if 'date' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMfilling.next()
    await message.reply('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(600)
    if 'time_start' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


# –õ–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –æ—Ç–≤–µ—Ç
async def getting_time_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time_start'] = message.text
    #     await FSMfilling.next()
    #     await message.reply('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:30')

    # #–õ–æ–≤–∏–º –ø—è—Ç—ã–π –æ—Ç–≤–µ—Ç
    # async def getting_time_end(message: types.Message, state: FSMfilling):
    #     async with state.proxy() as data_check:
    #         data_check['time_end'] = message.text
    #     await FSMfilling.next()
    #     await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —É—Å–ª—É–≥–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å.')

    # async def clients_operator(message: types.Message, state: FSMfilling):
    #     async with state.proxy() as data_check:
    #         data_check['clients_operator'] = message.text
    await FSMfilling.next()
    await message.reply('–°–∞–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã?', reply_markup=kb_answer)
    await asyncio.sleep(600)
    if 'rezgim' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_rezgim(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['rezgim'] = message.text
    await FSMfilling.next()
    await message.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(600)
    if 'number_workers' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_number_workers(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_workers'] = int(message.text)
    await FSMfilling.next()
    await message.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(600)
    if 'number_clients' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_number_clients(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_clients'] = int(message.text)
    await FSMfilling.next()
    await message.reply(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –ò–º—è –∏ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ: –Ω–µ –ø–æ–º–Ω—é. –§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç')
    await asyncio.sleep(600)
    if 'name_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_name_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['name_worker'] = message.text
    await FSMfilling.next()
    await message.reply('–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
    await asyncio.sleep(600)
    if 'describe_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


# async def getting_describe_worker(message: types.Message, state: FSMfilling):
#     async with state.proxy() as data_check:
#         data_check['describe_worker'] = message.text    
#     await FSMfilling.next()
#  await message.reply('–ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ –Ω–µ —Ç–∞–∫. –ï—Å–ª–∏ –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º - –Ω–∞–ø–∏—à–∏—Ç–µ :–æ–∫.')

# async def getting_workers_look(message: types.Message, state: FSMfilling):
#     async with state.proxy() as data_check:
#         data_check['workers_look'] = message.text    
#     await FSMfilling.next()
#     await message.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ: –Ω–µ –ø–æ–º–Ω—é. –§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')

async def getting_describe_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['describe_worker'] = message.text
    #     await FSMfilling.next()
    #     await message.reply('–û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –æ—Ñ–∏—Å–∞ –ø—Ä–æ–¥–∞–∂, —á–∏—Å—Ç–æ—Ç—É, –ø–æ—Ä—è–¥–æ–∫, —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')

    # async def getting_sale_office(message: types.Message, state: FSMfilling):
    #     async with state.proxy() as data_check:
    #         data_check['sale_office'] = message.text
    #     await FSMfilling.next()
    #     await message.reply('–ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥–∞ –æ—Ñ–∏—Å–∞ –ø—Ä–æ–¥–∞–∂ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ –Ω–µ —Ç–∞–∫. –ï—Å–ª–∏ –û–ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º - –Ω–∞–ø–∏—à–∏—Ç–µ :–æ–∫.')

    # async def getting_bad_sale_office(message: types.Message, state: FSMfilling):
    #     async with state.proxy() as data_check:
    #         data_check['bad_sale_office'] = message.text
    await FSMfilling.next()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤–∏–∑–∏—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.')
    await asyncio.sleep(600)
    if 'resume' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_resume(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['resume'] = message.text
    await FSMfilling.next()
    await message.reply('–ü—Ä–∏—à–∏–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞.')
    await asyncio.sleep(600)
    if 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


# –õ–æ–≤–∏–º —à–µ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMfilling.next()
    await message.reply('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(600)
    if 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


# –õ–æ–≤–∏–º —Å–µ–¥—å–º–æ–π –æ—Ç–≤–µ—Ç
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5365166446:AAEe740Q5yPT2IlHdsFvKACr9xSH6ASN8xk"/{(await bot.get_file(message.photo[0].file_id))["file_path"]}'
    await FSMfilling.next()
    await message.reply('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(600)
    if 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


async def getting_photo2(message: types.Message, state: FSMContext):
    admin_id = 708697982
    user_id = message.from_user.id
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5365166446:AAEe740Q5yPT2IlHdsFvKACr9xSH6ASN8xk"/{(await bot.get_file(message.photo[0].file_id))["file_path"]}'
    await sqlite_db.sql_add_check(state)
    await message.reply(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=kb_client)
    await bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É {data_check["number"]}')
    await state.finish()


async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)


# @dp.message_handler(state="*", commands ='–æ—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('OK')


# async def scan_message(message: types.Message):
#     document_id = message.document.file_id
#     file_info = await bot.get_file(document_id)
#     print(f'file_id: {file_info.file_id}')
#     print(f'file_path: {file_info.file_path}')
#     print(f'file_size: {file_info.file_size}')
#     print(f'file_unique_id: {file_info.file_unique_id}')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(command_menu, commands=['–ú–µ–Ω—é'])
    # dp.register_message_handler(scan_message, content_types=['document'])
    dp.register_message_handler(test, commands=['–ú–æ–∏_–ø—Ä–æ–≤–µ—Ä–∫–∏'])
    dp.register_message_handler(command_info, commands=['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'])
    dp.register_message_handler(location_request, commands=['–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π'])
    dp.register_message_handler(location_give, content_types=["location"])

    dp.register_message_handler(take_one, commands=['–ù–∞–∑–Ω–∞—á–∏—Ç—å'], state=None)
    dp.register_message_handler(number, state=FSMassignation.number_state)
    dp.register_message_handler(remove, commands=['–°–Ω—è—Ç—å_—Å–µ–±—è_—Å_–ø—Ä–æ–≤–µ—Ä–∫–∏'], state=None)
    dp.register_message_handler(remove_number, state=FSMremove.number_state)

    dp.register_message_handler(command_fill, commands=['–ó–∞–ø–æ–ª–Ω–∏—Ç—å_–∞–Ω–∫–µ—Ç—É'], state=None)
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(getting_number, state=FSMfilling.number)
    dp.register_message_handler(getting_date, state=FSMfilling.date)
    dp.register_message_handler(getting_time_start, state=FSMfilling.time_start)
    # dp.register_message_handler(getting_time_end, state = FSMfilling.time_end)
    # dp.register_message_handler(clients_operator, state = FSMfilling.clients_operator)
    dp.register_message_handler(getting_rezgim, state=FSMfilling.rezgim)
    dp.register_message_handler(getting_number_workers, state=FSMfilling.number_workers)
    dp.register_message_handler(getting_number_clients, state=FSMfilling.number_clients)
    dp.register_message_handler(getting_name_worker, state=FSMfilling.name_worker)
    # dp.register_message_handler(getting_dolzhnost_worker, state = FSMfilling.dolzhnost_worker)
    dp.register_message_handler(getting_describe_worker, state=FSMfilling.describe_worker)
    # dp.register_message_handler(getting_workers_look, state = FSMfilling.workers_look)
    # dp.register_message_handler(getting_bad_worker_FIO, state = FSMfilling.bad_worker_FIO)
    # dp.register_message_handler(getting_sale_office, state = FSMfilling.sale_office)
    # dp.register_message_handler(getting_bad_sale_office, state = FSMfilling.bad_sale_office)
    dp.register_message_handler(getting_resume, state=FSMfilling.resume)
    dp.register_message_handler(getting_audio, content_types=['text'], state=FSMfilling.audio)
    dp.register_message_handler(getting_photo1, content_types=['photo'], state=FSMfilling.photo1)
    dp.register_message_handler(getting_photo2, content_types=['photo'], state=FSMfilling.photo2)
    dp.register_message_handler(photo_loop, content_types=types.ContentType.TEXT,
                                state=[FSMfilling.photo1, FSMfilling.photo2])


def register_handlers_registration(dp: Dispatcher):
    dp.register_message_handler(cm_start, commands=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'], state=None)
    dp.register_message_handler(get_help_choose_menu, commands=['–ü–æ–º–æ—â—å'])
    dp.register_callback_query_handler(get_help_choose, Text(startswith="help_"))
    dp.register_message_handler(get_help_comment, state=HelpFSM.get_comment)
    dp.register_callback_query_handler(answer_help_request, Text(startswith="helpanswer_"), user_id=[708697982])
    dp.register_message_handler(get_answer_text, state=HelpFSM.get_answer)
    dp.register_message_handler(oplata, commands=['–û–ø–ª–∞—Ç–∞'])
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(getting_name, state=FSMregistration.name)
    dp.register_message_handler(getting_surname, state=FSMregistration.surname)
    dp.register_message_handler(getting_email, state=FSMregistration.email)
    dp.register_message_handler(getting_phone, state=FSMregistration.phone)
